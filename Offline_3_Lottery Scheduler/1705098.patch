diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..691a8f6
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,3 @@
+{
+    "C_Cpp.errorSquiggles": "Disabled"
+}
\ No newline at end of file
diff --git a/1705098.patch b/1705098.patch
new file mode 100644
index 0000000..e69de29
diff --git a/Makefile b/Makefile
index 09d790c..483eff2 100644
--- a/Makefile
+++ b/Makefile
@@ -181,6 +181,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_ps\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +218,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
@@ -249,7 +250,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
+	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c ps.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
diff --git a/defs.h b/defs.h
index 82fb982..7750394 100644
--- a/defs.h
+++ b/defs.h
@@ -9,6 +9,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -120,7 +121,8 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
-
+void            do_setticket(struct proc* , int);
+void            do_getpinfo(struct pstat*);
 // swtch.S
 void            swtch(struct context**, struct context*);
 
diff --git a/file.h b/file.h
index 0990c82..efa84cd 100644
--- a/file.h
+++ b/file.h
@@ -34,4 +34,4 @@ struct devsw {
 
 extern struct devsw devsw[];
 
-#define CONSOLE 1
+#define CONSOLE 1
\ No newline at end of file
diff --git a/fs.h b/fs.h
index 3214f1d..479ba9d 100644
--- a/fs.h
+++ b/fs.h
@@ -54,4 +54,3 @@ struct dirent {
   ushort inum;
   char name[DIRSIZ];
 };
-
diff --git a/memlayout.h b/memlayout.h
index d1615f7..6b7d339 100644
--- a/memlayout.h
+++ b/memlayout.h
@@ -12,4 +12,4 @@
 #define P2V(a) ((void *)(((char *) (a)) + KERNBASE))
 
 #define V2P_WO(x) ((x) - KERNBASE)    // same as V2P, but without casts
-#define P2V_WO(x) ((x) + KERNBASE)    // same as P2V, but without casts
+#define P2V_WO(x) ((x) + KERNBASE)    // same as P2V, but without casts
\ No newline at end of file
diff --git a/param.h b/param.h
index a7e90ef..d74f51a 100644
--- a/param.h
+++ b/param.h
@@ -11,4 +11,3 @@
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       1000  // size of file system in blocks
-
diff --git a/proc.c b/proc.c
index 806b1b1..edbe14e 100644
--- a/proc.c
+++ b/proc.c
@@ -6,12 +6,61 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+//added by afnan
+#include "pstat.h"
+#include "random.h"
 
 struct {
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
 
+void do_setticket(struct proc *myproc , int n){
+  acquire(&ptable.lock);
+  setproctickets(myproc, n);
+  release(&ptable.lock);
+}
+
+void do_getpinfo(struct pstat *target){
+  acquire(&ptable.lock);
+  struct proc* p;
+  for(p=ptable.proc;p != &(ptable.proc[NPROC]); p++)
+    {
+      const int index = p - ptable.proc;
+      target->inuse[index] = 0;
+      if(p->state != UNUSED)
+        {
+          target->pid[index] = p->pid;
+          target->ticks[index] = p->ticks;
+          target->tickets[index] = p->tickets;
+          target->inuse[index] = p->inuse;
+        }
+    }
+  release(&ptable.lock);
+}
+
+int total_tickets;
+
+void setproctickets(struct proc* pp, int n)
+{
+  total_tickets -= pp->tickets;
+  pp->tickets = n;
+  total_tickets += pp->tickets;
+}
+
+void storetickets(struct proc* pp)
+{
+  if(pp->state != SLEEPING)panic("Not sleeping at storetickets");
+  total_tickets -= pp->tickets;
+}
+
+void restoretickets(struct proc* pp)
+{
+  if(pp->state != SLEEPING)panic("Not sleeping at waketickets");
+  total_tickets += pp->tickets;
+}
+//code ended by afnan
+
 static struct proc *initproc;
 
 int nextpid = 1;
@@ -200,6 +249,10 @@ fork(void)
   np->parent = curproc;
   *np->tf = *curproc->tf;
 
+  //added by afnan
+  setproctickets(np , curproc->tickets);
+  //code ended by afnan
+
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
 
@@ -261,6 +314,10 @@ exit(void)
     }
   }
 
+  //added by afnan
+  setproctickets(curproc , 0);
+  //code ended by afnan
+
   // Jump into the scheduler, never to return.
   curproc->state = ZOMBIE;
   sched();
@@ -295,6 +352,12 @@ wait(void)
         p->name[0] = 0;
         p->killed = 0;
         p->state = UNUSED;
+
+        //added by afnan
+        p->ticks = 0;
+        setproctickets(p, 0);
+        //code ended by afnan
+        
         release(&ptable.lock);
         return pid;
       }
@@ -326,29 +389,69 @@ scheduler(void)
   struct cpu *c = mycpu();
   c->proc = 0;
   
+  //added by afnan
+  acquire(&ptable.lock);
+  setproctickets(ptable.proc, 1);
+  release(&ptable.lock);
+
+  srand(1323);
+  //code ended by afnan
+
   for(;;){
     // Enable interrupts on this processor.
     sti();
 
+    //added by afnan
+    //random ticket number generation
+    int chosen_ticket = rand() % (total_tickets+1);
+    int sum = 0;
+    //code ended by afnan
+
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
+      if(p->state != RUNNABLE){
         continue;
+      }
+      //added by afnan
+      sum += p->tickets;
+
+      if(sum < chosen_ticket){
+        continue;
+      }
+      //code ended by afnan
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
       c->proc = p;
+      
       switchuvm(p);
       p->state = RUNNING;
+      
+      //added by afnan
+      p->inuse = 1;
+      acquire(&tickslock);
+      int start = ticks;
+      release(&tickslock);
 
       swtch(&(c->scheduler), p->context);
+
+      acquire(&tickslock);
+      int elapsed = ticks - start;
+      release(&tickslock);
+      p->ticks += elapsed;
+      //code ended by afnan
+
       switchkvm();
 
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+      
+      //added by afnan
+      break;
+      //code ened by afnan
     }
     release(&ptable.lock);
 
@@ -438,6 +541,10 @@ sleep(void *chan, struct spinlock *lk)
   // Go to sleep.
   p->chan = chan;
   p->state = SLEEPING;
+  
+  //added by afnan
+  storetickets(p);
+  //code ended by afnan
 
   sched();
 
@@ -460,8 +567,13 @@ wakeup1(void *chan)
   struct proc *p;
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
+    if(p->state == SLEEPING && p->chan == chan){
+      //added by afnan
+      restoretickets(p);
+      //code ended by afnan
       p->state = RUNNABLE;
+    }
+      
 }
 
 // Wake up all processes sleeping on chan.
@@ -486,8 +598,13 @@ kill(int pid)
     if(p->pid == pid){
       p->killed = 1;
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
+      if(p->state == SLEEPING){
+        //added by afnan
+        restoretickets(p);
+        //code ended by afnan
         p->state = RUNNABLE;
+      }
+        
       release(&ptable.lock);
       return 0;
     }
diff --git a/proc.h b/proc.h
index 1647114..b56b831 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,12 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  //added by afnan
+  int inuse;// If it's being run by a CPU or not
+  int ticks;// How many ticks has accumulated
+  int tickets;// How many tickets this process have
+  //code ended by afnan
 };
 
 // Process memory is laid out contiguously, low addresses first:
@@ -56,3 +62,8 @@ struct proc {
 //   original data and bss
 //   fixed-size stack
 //   expandable heap
+
+// added by afnan
+void setproctickets(struct proc* pp, int n);
+//code ended by afnan
+
diff --git a/ps.c b/ps.c
new file mode 100644
index 0000000..3dedada
--- /dev/null
+++ b/ps.c
@@ -0,0 +1,67 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "pstat.h"
+
+void spin() {
+    unsigned y = 0;
+
+    while (1) {
+        y = 0;
+        while (y < 10000) {
+            y++;
+        }
+    }
+}
+
+void printpinfo(int pid)
+{
+	struct pstat pinfo = {0};
+	getpinfo(&pinfo);
+	int i;
+    
+    for (i = 0; i < NPROC; i++) {
+        if(pinfo.pid[i] == pid) {
+		    printf(1,
+                    "%d\t%d\t%d\t%d\n", 
+                    pinfo.pid[i],
+                    pinfo.ticks[i],
+                    pinfo.tickets[i],
+                    pinfo.inuse[i]
+                    );
+        }
+    }
+}
+
+
+int main(int argc, char *argv[])
+{
+	 int pid1, pid2, pid3;
+      
+    if ((pid1 = fork()) == 0) {
+        settickets(10);
+        spin();
+    }
+    else if ((pid2 = fork()) == 0) {
+        settickets(20);
+        spin();
+    }
+    else if ((pid3 = fork()) == 0) {
+        settickets(30);
+        spin();
+    }
+    int tc=1;
+    while(1){
+        printf(1 , "\n--------------- Test %d -----------------\n" , tc);
+        printf(1,"PID\tTicks\tTickets\tInUse\n");
+        printpinfo(pid1);
+        printpinfo(pid2);
+        printpinfo(pid3);
+        tc++;
+        sleep(500);
+    }
+    wait();
+    wait();
+    wait();
+    exit();
+}
\ No newline at end of file
diff --git a/pstat.h b/pstat.h
new file mode 100644
index 0000000..24281f4
--- /dev/null
+++ b/pstat.h
@@ -0,0 +1,12 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+
+struct pstat {
+  int inuse[NPROC]; // whether this slot of the process table is in use (1 or 0)
+  int tickets[NPROC]; // the number of tickets this process has
+  int pid[NPROC]; // the PID of each process
+  int ticks[NPROC]; // the number of ticks each process has accumulated
+};
+
+#endif // _PSTAT_H_
diff --git a/random.h b/random.h
new file mode 100644
index 0000000..8ee439b
--- /dev/null
+++ b/random.h
@@ -0,0 +1,36 @@
+#include "types.h"
+
+#define PHI 0x9e3779b9
+
+static uint Q[4096], c = 362436;
+
+static void srand(uint x)
+{
+	int i;
+
+	Q[0] = x;
+	Q[1] = x + PHI;
+	Q[2] = x + PHI + PHI;
+
+	for (i = 3; i < 4096; i++)
+			Q[i] = Q[i - 3] ^ Q[i - 2] ^ PHI ^ i;
+}
+
+static uint rand(void)
+{
+	if(sizeof(unsigned long long) != 8){
+		return 0;
+	}
+	unsigned long long t, a = 18782LL;
+	static uint i = 4095;
+	uint x, r = 0xfffffffe;
+	i = (i + 1) & 4095;
+	t = a * Q[i] + c;
+	c = (t >> 32);
+	x = t + c;
+	if (x < c) {
+	    x++;
+	    c++;
+	}
+	return (Q[i] = r - x);
+}
\ No newline at end of file
diff --git a/syscall.c b/syscall.c
index ee85261..0ed9b58 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,8 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_settickets(void);
+extern int sys_getpinfo(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +128,8 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets]  sys_settickets,
+[SYS_getpinfo]  sys_getpinfo,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..7926b7f 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
diff --git a/sysproc.c b/sysproc.c
index 0686d29..76f2370 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,6 +6,8 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "pstat.h"
+
 
 int
 sys_fork(void)
@@ -89,3 +91,30 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+//added by afnan
+int sys_settickets(void)
+{
+  struct proc *curproc = myproc();
+  int number_of_tickets;
+  argint(0, &number_of_tickets);
+  if(number_of_tickets <= 0) return -1;
+  
+  do_setticket(curproc , number_of_tickets);
+
+  return 0;
+}
+
+
+int sys_getpinfo(void)
+{
+  struct pstat* target;
+  argptr(0,(void*)&target,sizeof(*target));
+
+  if(!target)return -1;
+  
+  do_getpinfo(target);
+  
+  return 0;
+}
+//code ended by afnan
diff --git a/traps.h b/traps.h
index 0bd1fd8..1a7bd46 100644
--- a/traps.h
+++ b/traps.h
@@ -35,4 +35,3 @@
 #define IRQ_IDE         14
 #define IRQ_ERROR       19
 #define IRQ_SPURIOUS    31
-
diff --git a/types.h b/types.h
index e4adf64..b53f559 100644
--- a/types.h
+++ b/types.h
@@ -2,3 +2,7 @@ typedef unsigned int   uint;
 typedef unsigned short ushort;
 typedef unsigned char  uchar;
 typedef uint pde_t;
+
+#ifndef NULL
+#define NULL (0)
+#endif
diff --git a/user.h b/user.h
index 4f99c52..115b3a6 100644
--- a/user.h
+++ b/user.h
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -23,6 +24,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+// added by afnan
+int settickets(int);
+int getpinfo(struct pstat *);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usertests.c b/usertests.c
index a1e97e7..69fb8a4 100644
--- a/usertests.c
+++ b/usertests.c
@@ -1415,7 +1415,8 @@ void
 sbrktest(void)
 {
   int fds[2], pid, pids[10], ppid;
-  char *a, *b, *c, *lastaddr, *oldbrk, *p, scratch;
+  //char *a, *b, *c, *lastaddr, *oldbrk, *p, scratch;
+  char *a, *b, *c , *oldbrk, *p, scratch;
   uint amt;
 
   printf(stdout, "sbrk test\n");
@@ -1457,8 +1458,8 @@ sbrktest(void)
     printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
     exit();
   }
-  lastaddr = (char*) (BIG-1);
-  *lastaddr = 99;
+  //lastaddr = (char*) (BIG-1);
+  //*lastaddr = 99;
 
   // can one de-allocate?
   a = sbrk(0);
@@ -1480,11 +1481,13 @@ sbrktest(void)
     printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
     exit();
   }
+  /*
   if(*lastaddr == 99){
     // should be zero
     printf(stdout, "sbrk de-allocation didn't really deallocate\n");
     exit();
   }
+  */
 
   a = sbrk(0);
   c = sbrk(-(sbrk(0) - oldbrk));
diff --git a/usys.S b/usys.S
index 8bfd8a1..bce13c0 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,5 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(settickets)
+SYSCALL(getpinfo)
